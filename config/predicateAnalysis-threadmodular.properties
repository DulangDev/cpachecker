analysis.checkCounterexamples = false
analysis.threadOperationsTransform = true
analysis.traversal.order=bfs
analysis.traversal.useThreadModularOrdering = true

# enable use of multi-edges
cpa.composite.aggregateBasicBlocks = false

cpa.callstack.skipRecursion = true

# ARGCPA is needed for counterexample analysis
cpa = cpa.threadmodular.ThreadModularCPA
ThreadModularCPA.cpa =  cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
# CompositeCPA.cpas = cpa.thread.ThreadCPA, cpa.lock.LockCPA, cpa.predicate.PredicateCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.thread.ThreadCPA, cpa.predicate.PredicateCPA

cpa.location.enableStatesWithEdges=true
analysis.summaryEdges = true

# this automaton defines which locations are the error locations
specification = specification/default.spc

output.coverage = false
coverage.enabled = false
cfa.export = false
cpa.arg.export = true
cpa.arg.errorPath.export = true
report.export = true

analysis.algorithm.CEGAR               = true
cegar.refiner                          = cpa.predicate.PredicateRefiner

cfa.threads.threadCreate = pthread_create
cfa.threads.threadJoin = pthread_join

solver.solver=SMTINTERPOL
cpa.predicate.encodeBitvectorAs = INTEGER
cpa.predicate.encodeFloatAs = RATIONAL
cpa.predicate.useArraysForHeap = false
cpa.predicate.defaultArrayLength = 1
cpa.predicate.maxArrayLength = 1
cpa.predicate.abstractions.export=false
cpa.predicate.mergeTypeForInferenceObjects=JOIN
# enable BnB
cpa.predicate.useMemoryRegions=true
cpa.predicate.blk.threshold = 1



