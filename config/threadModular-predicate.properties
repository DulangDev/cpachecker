# ------------------------------------------------------------------
# This configuration file uses value analysis of integer
# variables in a model-checking configuration.
# A bit-precise predicate analysis is used to cross-check
# counterexamples.
# ------------------------------------------------------------------

# A bit-precise predicate analysis is used to cross-check counterexamples
analysis.checkCounterexamples = false

analysis.threadModular = true
analysis.threadModularReachedSet = true

# enable use of multi-edges
cpa.composite.aggregateBasicBlocks = false

cpa.callstack.skipRecursion = true

# ARGCPA is needed for counterexample analysis
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
# cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.thread.ThreadCPA, cpa.lock.LockCPA, cpa.predicate.PredicateCPA
# CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.value.ValueAnalysisCPA

analysis.summaryEdges = true

output.coverage = false
cfa.export = false
cpa.arg.export = false
report.export = true
counterexample.export.enable = true
counterexample.export.graphml = witness.graphml
cpa.arg.proofWitness = witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false
cpa.arg.compressWitness = false
cpa.arg.witness.exportAssumptions = false

# for ldv visualization
# counterexample.export.compressWitness = false
# cpa.arg.witness.removeInsufficientEdges=false
# cpa.arg.witness.exportSourcecode = true
# cpa.arg.errorPath.export = true

analysis.algorithm.CEGAR               = true
cegar.refiner                          = cpa.predicate.PredicateRefiner

solver.solver=SMTINTERPOL
cpa.predicate.encodeBitvectorAs = INTEGER
cpa.predicate.encodeFloatAs = RATIONAL
cpa.predicate.useArraysForHeap = false
cpa.predicate.defaultArrayLength = 1
cpa.predicate.maxArrayLength = 1
cpa.predicate.abstractions.export=false
cpa.predicate.mergeTypeForInferenceObjects=JOIN
cpa.predicate.blk.threshold = 1
# enable BnB
cpa.predicate.useMemoryRegions=true

cpa.lock.lockinfo = mutex_lock, atomic_lock

mutex_lock.lock = pthread_mutex_lock, mutex_lock
mutex_lock.pthread_mutex_lock.parameters = 1
mutex_lock.unlock = pthread_mutex_unlock, mutex_unlock
mutex_lock.pthread_mutex_unlock.parameters = 1
mutex_lock.maxDepth = 2

atomic_lock.lock = __VERIFIER_atomic_begin
atomic_lock.unlock = __VERIFIER_atomic_end
atomic_lock.maxDepth = 2

cfa.threads.threadCreate = pthread_create
cfa.threads.threadJoin = pthread_join
