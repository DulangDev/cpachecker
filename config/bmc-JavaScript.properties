#
#  CPAchecker is a tool for configurable software verification.
#  This file is part of CPAchecker.
#
#  Copyright (C) 2007-2018  Dirk Beyer
#  All rights reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#
#  CPAchecker web page:
#    http://cpachecker.sosy-lab.org
#
// ----------------------------------------------------------------------
// This configuration file enables Bounded Model Checking.
// ----------------------------------------------------------------------

// the loop unrolling bound
cpa.loopbound.maxLoopIterations = 10

// disable bounding assertions (default is enabled)
//bmc.boundingAssertions = false

// The rest of the options should not be changed.

// best traversal order for formula creation
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true
analysis.traversal.useReverseLoopstack = true
analysis.traversal.useReverseLoopIterationCount = true

analysis.algorithm.BMC = true

// ARGCPA is needed in order to create an error path for unsafe programs
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopbound.LoopBoundCPA

// No caching, the formulas are never created twice
cpa.predicate.blk.useCache = false

// No abstractions
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = false

// Do not dump stuff that is not meaningful when using BMC.
cpa.predicate.predmap.export = false
cpa.predicate.invariants.export = false
cpa.predicate.invariants.exportAsPrecision = false

// Ignore target states during formula creation
cpa.automaton.breakOnTargetState = 0

#include includes/JavaScript.properties
