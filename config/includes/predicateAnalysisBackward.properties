
# analysis.algorithm.analysisWithEnabler = true
 cpa.composite.inCPAEnabledAnalysis=true
# cpa.composite.inCPAEnabledAnalysis=false

analysis.checkCounterexamples = false
counterexample.export.enabled = false

cpa.predicate.direction = BACKWARD
# analysis.initialStatesFor = EXIT
analysis.initialStatesFor = TARGET
analysis.partitionInitialStates = true

# analysis.algorithm.CEGAR = true
analysis.algorithm.CEGAR = true
# analysis.algorithm.CEGAR = false
cegar.refiner = cpa.predicate.PredicateRefiner
cpa.predicate.refinement.performInitialStaticRefinement = false

cpa.predicate.handlePointerAliasing = false
# cpa.predicate.abstractionType = FORMULA
# cpa.predicate.blk.threshold = 1
# cpa.predicate.blk.absOnLoop = true
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true
cpa.composite.aggregateBasicBlocks = false

cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPABackwards, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

cpa.callstack.traverseBackwards=true

# specification = ../specification/default.spc
 specification = ../specification/MainEntry.spc
backwardSpecification = ../specification/sv-comp-reachability.spc

#include resource-limits.properties

[analysis.traversal]
order = bfs
useReversePostorder = false
usePostorder = true
useCallstack = true
